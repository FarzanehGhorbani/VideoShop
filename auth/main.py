from typing import Dict
from .model import UserLoginSchema,UserSchema
from fastapi import APIRouter
from .crud import *
from .publisher import publisher
from .jwt_handler import signJWT,decodeJWT
# Create a router 
router = APIRouter(
    prefix="/auth",
    tags=['Authentication']
)

@router.post('/signup')
async def signup(user:UserSchema):
    '''Create a new user if not exists email then publish a message to email queue for verification and finally return the user.
            Parameters:
                user: UserSchema
                    UserSchema is a class that inherits from BaseModel.

            Returns:
                user: UserSchema if user is created successfully else return error message.

    '''
    try:
        await create_user(user)
        await publisher(user.dict(include={'UserName':True,'Email':True,'FirstName':True,'LastName':True}),'verify','/auth/signup/verified/')
        print(signJWT(user.Email))
        return user
    except ValueError as e:
        return {'error':str(e)+' . You should login'}
    except Exception as e:
        return {'error':str(e)}
    

@router.get('/signup/verified/{token}')
async def verify_email(token:str):
    '''Verify email if token is valid then return success message else return error message.
           
            Parameters:
                token: str 
                    token is a string that is generated by email .
                    
            Returns:
                success: dict
    '''
    try:
        user=await decodeJWT(token)
        print(user)
        await update_verfied_user(user['Email'])
        return {'body':'Email verified successfully'}
    except Exception as e:
        return {'error':str(e)}


@router.post('/login')
async def login(user:UserLoginSchema)->any:
    '''Authenticate user login time .if user not exist or password not match or not Verify, raise ValueError.
        if authentication is successful publish a message to email queue for verification and finally return updated access token.
            Parameters:
                user: UserLoginSchema
                    UserLoginSchema is a class that inherits from BaseModel.
            
            Returns:
                user: UserSchema if user is authenticated successfully else return error message.
    '''
    try:
        user=await authenticate_user(user)  
        await publisher(user.dict(include={'UserName':True,'Email':True,'FirstName':True,'LastName':True}),'login','/auth/login')
        signJWT(user.Email,1 if user.Remember_me else 30)
        {'body':'User logged in successfully'}
    except Exception as e:
        return {'error':str(e)}

            
        












