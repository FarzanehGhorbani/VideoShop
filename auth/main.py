from typing import Dict
from .model import UserLoginSchema,UserSchema
from fastapi import APIRouter
from .crud import *
from .publisher import publisher
from .jwt_handler import signJWT,decodeJWT
from pydantic import ValidationError
from .crud import get_user
import json
from bson import json_util

# Create a router 
router = APIRouter(
    prefix="/auth",
    tags=['Authentication']
)

@router.post('/signup')
async def signup(user:UserSchema):
    '''Create a new user if not exists email then publish a message to email queue for verification and finally return the user.
            Parameters:
                user: UserSchema
                    UserSchema is a class that inherits from BaseModel.

            Returns:
                user: UserSchema if user is created successfully else raise error message.

    '''
    print('-----------------------------')
    insert_id=await create_user(user)
    await publisher(user.dict(include={'UserName':True,'Email':True,'FirstName':True,'LastName':True}),'verify','/auth/signup/verified/')
    print(signJWT(user.Email,f"{insert_id}",1 if user.Remember_me else 30))
    return user
    
    

@router.get('/signup/verified/{token}')
async def verify_email(token:str):
    '''Verify email if token is valid then return success message else return error message.
           
            Parameters:
                token: str 
                    token is a string that is generated by email .
                    
            Returns:
                success: dict
    '''
    user=await decodeJWT(token)
    user=await get_user(user['Email'])
    await update_verfied_user(user['Email'])
    return signJWT(user['Email'],f"{user['_id']}",1 if user['Remember_me'] else 30)
    # return {'body':'Email verified successfully'}
    


@router.post('/login')
async def login(user:UserLoginSchema)->dict:
    '''Authenticate user login time .if user not exist or password not match or not Verify, raise httpexception.
        if authentication is successful publish a message to email queue for verification and finally return updated access token.
            Parameters:
                user: UserLoginSchema
                    UserLoginSchema is a class that inherits from BaseModel.
            
            Returns:
                user: UserSchema if user is authenticated successfully else raise error message.
    '''
    user_database=await authenticate_user(user)  
    await publisher(user.dict(include={'UserName':True,'Email':True,'FirstName':True,'LastName':True}),'login','/auth/login')
    return signJWT(user_database['Email'],f"{user_database['_id']}",1 if user_database["Remember_me"] else 30)
    
    

@router.get('/current_user')
async def current_user(email:str):
    user=await get_user(email)
    return json.loads(json_util.dumps(user['_id']))

@router.put('/update_user')
async def update_user(user:UserSchema):
    return {'body':'User updated successfully'}
        












